using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using AngleSharp;
using AngleSharp.Dom;
using AngleSharp.Parser.Html;
using Microsoft.Extensions.Logging;
using Xunit;
using Xunit.Abstractions;

namespace KeyForge.Tests.Security
{
    /// <summary>
    /// 漏洞扫描器
    /// </summary>
    public class VulnerabilityScanner : SecurityTestBase
    {
        private readonly HtmlParser _htmlParser;
        private readonly HttpClient _httpClient;
        
        public VulnerabilityScanner(ITestOutputHelper output) : base(output)
        {
            _htmlParser = new HtmlParser();
            _httpClient = new HttpClient();
        }

        [Fact]
        public async Task ScanForKnownVulnerabilities()
        {
            var result = await RunVulnerabilityScanAsync("Known Vulnerabilities", async () =>
            {
                var findings = new List<VulnerabilityFinding>();
                
                // 扫描常见漏洞
                findings.AddRange(await ScanForSqlInjection());
                findings.AddRange(await ScanForXssVulnerabilities());
                findings.AddRange(await ScanForPathTraversal());
                findings.AddRange(await ScanForSecurityMisconfigurations());
                findings.AddRange(await ScanForInformationDisclosure());
                
                return findings;
            });
            
            // 记录扫描结果
            Output.WriteLine($"Vulnerability scan completed. Score: {result.SecurityScore}/100");
            Output.WriteLine($"Critical: {result.CriticalCount}, High: {result.HighCount}, Medium: {result.MediumCount}, Low: {result.LowCount}");
            
            // 安全评分应该大于80
            Assert.True(result.SecurityScore >= 80, 
                $"Security score too low: {result.SecurityScore}/100");
        }

        [Fact]
        public async Task ScanForDependencyVulnerabilities()
        {
            var result = await RunVulnerabilityScanAsync("Dependency Vulnerabilities", async () =>
            {
                var findings = new List<VulnerabilityFinding>();
                
                // 扫描项目依赖
                findings.AddRange(await ScanNugetPackages());
                findings.AddRange(await ScanNodeModules());
                findings.AddRange(await ScanDockerImages());
                
                return findings;
            });
            
            Output.WriteLine($"Dependency scan completed. Found {result.Findings.Count} issues");
            
            // 不应该有严重的依赖漏洞
            Assert.True(result.CriticalCount == 0, 
                $"Found {result.CriticalCount} critical dependency vulnerabilities");
        }

        [Fact]
        public async Task ScanForCodeSecurityIssues()
        {
            var result = await RunVulnerabilityScanAsync("Code Security Issues", async () =>
            {
                var findings = new List<VulnerabilityFinding>();
                
                // 扫描代码安全问题
                findings.AddRange(await ScanForHardcodedSecrets());
                findings.AddRange(await ScanForInsecureRandom());
                findings.AddRange(await ScanForInsecureCryptography());
                findings.AddRange(await ScanForInsecureDeserialization());
                
                return findings;
            });
            
            Output.WriteLine($"Code security scan completed. Found {result.Findings.Count} issues");
            
            // 不应该有硬编码的密钥
            var hardcodedSecrets = result.Findings.Where(f => f.Category == "Hardcoded Secrets").ToList();
            Assert.True(hardcodedSecrets.Count == 0, 
                $"Found {hardcodedSecrets.Count} hardcoded secrets");
        }

        [Fact]
        public async Task ScanForConfigurationSecurity()
        {
            var result = await RunVulnerabilityScanAsync("Configuration Security", async () =>
            {
                var findings = new List<VulnerabilityFinding>();
                
                // 扫描配置安全问题
                findings.AddRange(await ScanForDefaultCredentials());
                findings.AddRange(await ScanForVerboseErrorMessages());
                findings.AddRange(await ScanForInsecureHeaders());
                findings.AddRange(await ScanForInsecureCookieSettings());
                
                return findings;
            });
            
            Output.WriteLine($"Configuration scan completed. Found {result.Findings.Count} issues");
            
            // 安全评分应该大于90
            Assert.True(result.SecurityScore >= 90, 
                $"Configuration security score too low: {result.SecurityScore}/100");
        }

        /// <summary>
        /// 扫描SQL注入漏洞
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanForSqlInjection()
        {
            var findings = new List<VulnerabilityFinding>();
            
            var sqlPayloads = new[]
            {
                "' OR '1'='1",
                "' OR 1=1--",
                "'; DROP TABLE users; --",
                "' UNION SELECT * FROM users--",
                "' AND SLEEP(5)--",
                "1; WAITFOR DELAY '0:0:5'--",
                "' OR 'x'='x",
                "' OR EXISTS(SELECT * FROM users WHERE username='admin')--"
            };

            var testEndpoints = new[]
            {
                "/api/users/search",
                "/api/scripts/query",
                "/api/auth/login"
            };

            foreach (var endpoint in testEndpoints)
            {
                foreach (var payload in sqlPayloads)
                {
                    try
                    {
                        var response = await TestClient.PostAsJsonAsync(endpoint, new { query = payload });
                        
                        if (response.IsSuccessStatusCode)
                        {
                            var content = await response.Content.ReadAsStringAsync();
                            
                            // 检查是否可能存在SQL注入
                            if (content.Contains("error") || content.Contains("exception") || 
                                content.Contains("syntax") || content.Contains("SQL"))
                            {
                                findings.Add(new VulnerabilityFinding
                                {
                                    Title = "Potential SQL Injection",
                                    Description = $"Endpoint {endpoint} may be vulnerable to SQL injection",
                                    Severity = VulnerabilitySeverity.High,
                                    Category = "SQL Injection",
                                    Location = endpoint,
                                    Recommendation = "Use parameterized queries and input validation",
                                    CodeSnippet = $"Payload: {payload}"
                                });
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.LogWarning(ex, "Error testing SQL injection on {Endpoint}", endpoint);
                    }
                }
            }

            return findings;
        }

        /// <summary>
        /// 扫描XSS漏洞
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanForXssVulnerabilities()
        {
            var findings = new List<VulnerabilityFinding>();
            
            var xssPayloads = new[]
            {
                "<script>alert('XSS')</script>",
                "<img src=x onerror=alert('XSS')>",
                "<svg onload=alert('XSS')>",
                "javascript:alert('XSS')",
                "<iframe src=javascript:alert('XSS')>",
                "<body onload=alert('XSS')>",
                "<div onmouseover=alert('XSS')>hover me</div>",
                "<a href=javascript:alert('XSS')>click me</a>"
            };

            var testEndpoints = new[]
            {
                "/api/users/profile",
                "/api/scripts/create",
                "/api/comments/add"
            };

            foreach (var endpoint in testEndpoints)
            {
                foreach (var payload in xssPayloads)
                {
                    try
                    {
                        var response = await TestClient.PostAsJsonAsync(endpoint, new { comment = payload });
                        
                        if (response.IsSuccessStatusCode)
                        {
                            var content = await response.Content.ReadAsStringAsync();
                            
                            // 检查XSS payload是否被反射
                            if (content.Contains(payload) || content.Contains("<script>") || 
                                content.Contains("onerror=") || content.Contains("onload="))
                            {
                                findings.Add(new VulnerabilityFinding
                                {
                                    Title = "Potential XSS Vulnerability",
                                    Description = $"Endpoint {endpoint} may be vulnerable to XSS",
                                    Severity = VulnerabilitySeverity.High,
                                    Category = "Cross-Site Scripting",
                                    Location = endpoint,
                                    Recommendation = "Implement proper input sanitization and output encoding",
                                    CodeSnippet = $"Payload: {payload}"
                                });
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.LogWarning(ex, "Error testing XSS on {Endpoint}", endpoint);
                    }
                }
            }

            return findings;
        }

        /// <summary>
        /// 扫描路径遍历漏洞
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanForPathTraversal()
        {
            var findings = new List<VulnerabilityFinding>();
            
            var traversalPayloads = new[]
            {
                "../../../etc/passwd",
                "..\\..\\..\\windows\\system32\\config\\sam",
                "....//....//....//etc/passwd",
                "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",
                "..%2f..%2f..%2fetc%2fpasswd",
                "/var/www/html/../../etc/passwd"
            };

            var testEndpoints = new[]
            {
                "/api/files/read",
                "/api/scripts/load",
                "/api/templates/view"
            };

            foreach (var endpoint in testEndpoints)
            {
                foreach (var payload in traversalPayloads)
                {
                    try
                    {
                        var response = await TestClient.GetAsync($"{endpoint}?file={payload}");
                        
                        if (response.IsSuccessStatusCode)
                        {
                            var content = await response.Content.ReadAsStringAsync();
                            
                            // 检查是否成功读取了系统文件
                            if (content.Contains("root:") || content.Contains("[boot loader]") || 
                                content.Contains("daemon:") || content.Contains("bin:"))
                            {
                                findings.Add(new VulnerabilityFinding
                                {
                                    Title = "Path Traversal Vulnerability",
                                    Description = $"Endpoint {endpoint} is vulnerable to path traversal",
                                    Severity = VulnerabilitySeverity.Critical,
                                    Category = "Path Traversal",
                                    Location = endpoint,
                                    Recommendation = "Validate and sanitize file paths",
                                    CodeSnippet = $"Payload: {payload}"
                                });
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.LogWarning(ex, "Error testing path traversal on {Endpoint}", endpoint);
                    }
                }
            }

            return findings;
        }

        /// <summary>
        /// 扫描安全配置错误
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanForSecurityMisconfigurations()
        {
            var findings = new List<VulnerabilityFinding>();
            
            try
            {
                // 检查默认页面
                var response = await TestClient.GetAsync("/");
                
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    
                    // 检查是否显示服务器信息
                    if (content.Contains("Server:") || content.Contains("X-Powered-By:"))
                    {
                        findings.Add(new VulnerabilityFinding
                        {
                            Title = "Server Information Disclosure",
                            Description = "Server is disclosing version information",
                            Severity = VulnerabilitySeverity.Low,
                            Category = "Information Disclosure",
                            Recommendation = "Remove server headers and version information"
                        });
                    }
                }
                
                // 检查目录列表
                var dirResponse = await TestClient.GetAsync("/api/");
                if (dirResponse.IsSuccessStatusCode)
                {
                    var dirContent = await dirResponse.Content.ReadAsStringAsync();
                    if (dirContent.Contains("Directory Listing") || dirContent.Contains("<a href="))
                    {
                        findings.Add(new VulnerabilityFinding
                        {
                            Title = "Directory Listing Enabled",
                            Description = "Directory listing is enabled",
                            Severity = VulnerabilitySeverity.Medium,
                            Category = "Security Misconfiguration",
                            Recommendation = "Disable directory listing"
                        });
                    }
                }
                
                // 检查调试页面
                var debugEndpoints = new[] { "/debug", "/test", "/dev", "/staging" };
                foreach (var debugEndpoint in debugEndpoints)
                {
                    var debugResponse = await TestClient.GetAsync(debugEndpoint);
                    if (debugResponse.IsSuccessStatusCode)
                    {
                        findings.Add(new VulnerabilityFinding
                        {
                            Title = "Debug Endpoint Accessible",
                            Description = $"Debug endpoint {debugEndpoint} is accessible",
                            Severity = VulnerabilitySeverity.Medium,
                            Category = "Security Misconfiguration",
                            Recommendation = "Remove debug endpoints from production"
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error scanning for security misconfigurations");
            }

            return findings;
        }

        /// <summary>
        /// 扫描信息泄露
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanForInformationDisclosure()
        {
            var findings = new List<VulnerabilityFinding>();
            
            var sensitivePaths = new[]
            {
                "/web.config",
                "/appsettings.json",
                "/.env",
                "/config/database.json",
                "/logs/error.log",
                "/backup/",
                "/.git/config",
                "/.svn/entries",
                "/README.md",
                "/CHANGELOG.md"
            };

            foreach (var path in sensitivePaths)
            {
                try
                {
                    var response = await TestClient.GetAsync(path);
                    
                    if (response.IsSuccessStatusCode)
                    {
                        findings.Add(new VulnerabilityFinding
                        {
                            Title = "Information Disclosure",
                            Description = $"Sensitive file accessible: {path}",
                            Severity = VulnerabilitySeverity.Medium,
                            Category = "Information Disclosure",
                            Location = path,
                            Recommendation = "Restrict access to sensitive files"
                        });
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogWarning(ex, "Error checking {Path}", path);
                }
            }

            return findings;
        }

        /// <summary>
        /// 扫描Nuget包漏洞
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanNugetPackages()
        {
            var findings = new List<VulnerabilityFinding>();
            
            try
            {
                var projectFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.csproj", SearchOption.AllDirectories);
                
                foreach (var projectFile in projectFiles)
                {
                    var content = await File.ReadAllTextAsync(projectFile);
                    
                    // 检查已知有漏洞的包
                    var vulnerablePackages = new Dictionary<string, string>
                    {
                        { "Newtonsoft.Json", "13.0.1" },
                        { "System.Text.Json", "6.0.0" },
                        { "Microsoft.AspNetCore.Mvc", "2.2.0" }
                    };
                    
                    foreach (var (package, version) in vulnerablePackages)
                    {
                        if (content.Contains(package))
                        {
                            findings.Add(new VulnerabilityFinding
                            {
                                Title = "Vulnerable Nuget Package",
                                Description = $"Package {package} may have known vulnerabilities",
                                Severity = VulnerabilitySeverity.Medium,
                                Category = "Dependency Vulnerability",
                                Location = projectFile,
                                Recommendation = $"Update {package} to latest version"
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error scanning Nuget packages");
            }

            return findings;
        }

        /// <summary>
        /// 扫描Node模块漏洞
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanNodeModules()
        {
            var findings = new List<VulnerabilityFinding>();
            
            try
            {
                var packageJsonFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "package.json", SearchOption.AllDirectories);
                
                foreach (var packageFile in packageJsonFiles)
                {
                    var content = await File.ReadAllTextAsync(packageFile);
                    
                    // 检查前端依赖的漏洞
                    if (content.Contains("lodash") || content.Contains("moment") || content.Contains("axios"))
                    {
                        findings.Add(new VulnerabilityFinding
                        {
                            Title = "Node.js Dependencies",
                            Description = "Review Node.js dependencies for known vulnerabilities",
                            Severity = VulnerabilitySeverity.Low,
                            Category = "Dependency Vulnerability",
                            Location = packageFile,
                            Recommendation = "Run npm audit to check for vulnerabilities"
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error scanning Node modules");
            }

            return findings;
        }

        /// <summary>
        /// 扫描Docker镜像漏洞
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanDockerImages()
        {
            var findings = new List<VulnerabilityFinding>();
            
            try
            {
                var dockerFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "Dockerfile*", SearchOption.AllDirectories);
                
                foreach (var dockerFile in dockerFiles)
                {
                    var content = await File.ReadAllTextAsync(dockerFile);
                    
                    // 检查基础镜像
                    if (content.Contains("FROM") && content.Contains(":latest"))
                    {
                        findings.Add(new VulnerabilityFinding
                        {
                            Title = "Docker Latest Tag",
                            Description = "Using latest tag for Docker image",
                            Severity = VulnerabilitySeverity.Low,
                            Category = "Container Security",
                            Location = dockerFile,
                            Recommendation = "Use specific version tags for Docker images"
                        });
                    }
                    
                    // 检查特权容器
                    if (content.Contains("--privileged") || content.Contains("USER root"))
                    {
                        findings.Add(new VulnerabilityFinding
                        {
                            Title = "Privileged Docker Container",
                            Description = "Docker container may be running with unnecessary privileges",
                            Severity = VulnerabilitySeverity.Medium,
                            Category = "Container Security",
                            Location = dockerFile,
                            Recommendation = "Run containers with minimal privileges"
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error scanning Docker images");
            }

            return findings;
        }

        /// <summary>
        /// 扫描硬编码密钥
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanForHardcodedSecrets()
        {
            var findings = new List<VulnerabilityFinding>();
            
            try
            {
                var codeFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.cs", SearchOption.AllDirectories);
                
                var secretPatterns = new[]
                {
                    (@"password\s*=\s*[""'][^""']{8,}[""']", "Hardcoded Password"),
                    (@"secret\s*=\s*[""'][^""']{16,}[""']", "Hardcoded Secret"),
                    (@"api_key\s*=\s*[""'][^""']{16,}[""']", "Hardcoded API Key"),
                    (@"connectionstring\s*=\s*[""'][^""']{20,}[""']", "Hardcoded Connection String"),
                    (@"private\s+key\s*=\s*[""'][^""']{20,}[""']", "Hardcoded Private Key")
                };
                
                foreach (var file in codeFiles)
                {
                    var content = await File.ReadAllTextAsync(file);
                    
                    foreach (var (pattern, title) in secretPatterns)
                    {
                        var matches = Regex.Matches(content, pattern, RegexOptions.IgnoreCase);
                        foreach (Match match in matches)
                        {
                            findings.Add(new VulnerabilityFinding
                            {
                                Title = title,
                                Description = $"Hardcoded secret found in {Path.GetFileName(file)}",
                                Severity = VulnerabilitySeverity.Critical,
                                Category = "Hardcoded Secrets",
                                Location = file,
                                Recommendation = "Move secrets to secure configuration or environment variables",
                                CodeSnippet = match.Value
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error scanning for hardcoded secrets");
            }

            return findings;
        }

        /// <summary>
        /// 扫描不安全的随机数生成
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanForInsecureRandom()
        {
            var findings = new List<VulnerabilityFinding>();
            
            try
            {
                var codeFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.cs", SearchOption.AllDirectories);
                
                foreach (var file in codeFiles)
                {
                    var content = await File.ReadAllTextAsync(file);
                    
                    if (content.Contains("new Random()") || content.Contains("Random("))
                    {
                        findings.Add(new VulnerabilityFinding
                        {
                            Title = "Insecure Random Number Generation",
                            Description = "Using System.Random for security-sensitive operations",
                            Severity = VulnerabilitySeverity.Medium,
                            Category = "Insecure Cryptography",
                            Location = file,
                            Recommendation = "Use System.Security.Cryptography.RandomNumberGenerator for cryptographic operations"
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error scanning for insecure random");
            }

            return findings;
        }

        /// <summary>
        /// 扫描不安全的加密
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanForInsecureCryptography()
        {
            var findings = new List<VulnerabilityFinding>();
            
            try
            {
                var codeFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.cs", SearchOption.AllDirectories);
                
                var insecureAlgorithms = new[]
                {
                    ("MD5", "MD5 hash algorithm is insecure"),
                    ("SHA1", "SHA1 hash algorithm is insecure"),
                    ("DES", "DES encryption algorithm is insecure"),
                    ("3DES", "3DES encryption algorithm is insecure"),
                    ("RC2", "RC2 encryption algorithm is insecure"),
                    ("RC4", "RC4 encryption algorithm is insecure")
                };
                
                foreach (var file in codeFiles)
                {
                    var content = await File.ReadAllTextAsync(file);
                    
                    foreach (var (algorithm, description) in insecureAlgorithms)
                    {
                        if (content.Contains(algorithm))
                        {
                            findings.Add(new VulnerabilityFinding
                            {
                                Title = "Insecure Cryptographic Algorithm",
                                Description = description,
                                Severity = VulnerabilitySeverity.High,
                                Category = "Insecure Cryptography",
                                Location = file,
                                Recommendation = $"Use secure alternatives like SHA-256, AES-256"
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error scanning for insecure cryptography");
            }

            return findings;
        }

        /// <summary>
        /// 扫描不安全的反序列化
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanForInsecureDeserialization()
        {
            var findings = new List<VulnerabilityFinding>();
            
            try
            {
                var codeFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.cs", SearchOption.AllDirectories);
                
                foreach (var file in codeFiles)
                {
                    var content = await File.ReadAllTextAsync(file);
                    
                    if (content.Contains("BinaryFormatter") || content.Contains("JavaScriptSerializer") || 
                        content.Contains("SoapFormatter"))
                    {
                        findings.Add(new VulnerabilityFinding
                        {
                            Title = "Insecure Deserialization",
                            Description = "Using unsafe deserialization methods",
                            Severity = VulnerabilitySeverity.Critical,
                            Category = "Insecure Deserialization",
                            Location = file,
                            Recommendation = "Use safe deserialization methods or validate input thoroughly"
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error scanning for insecure deserialization");
            }

            return findings;
        }

        /// <summary>
        /// 扫描默认凭据
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanForDefaultCredentials()
        {
            var findings = new List<VulnerabilityFinding>();
            
            try
            {
                var configFiles = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.json", SearchOption.AllDirectories);
                
                foreach (var file in configFiles)
                {
                    var content = await File.ReadAllTextAsync(file);
                    
                    var defaultCredentials = new[]
                    {
                        ("admin", "admin"),
                        ("root", "root"),
                        ("user", "password"),
                        ("admin", "password"),
                        ("admin", "123456")
                    };
                    
                    foreach (var (username, password) in defaultCredentials)
                    {
                        if (content.Contains(username) && content.Contains(password))
                        {
                            findings.Add(new VulnerabilityFinding
                            {
                                Title = "Default Credentials",
                                Description = "Default credentials found in configuration",
                                Severity = VulnerabilitySeverity.Critical,
                                Category = "Default Credentials",
                                Location = file,
                                Recommendation = "Change default credentials immediately"
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error scanning for default credentials");
            }

            return findings;
        }

        /// <summary>
        /// 扫描详细的错误信息
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanForVerboseErrorMessages()
        {
            var findings = new List<VulnerabilityFinding>();
            
            try
            {
                // 测试404错误页面
                var response = await TestClient.GetAsync("/nonexistent-page");
                
                if (response.IsSuccessStatusCode || response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    
                    if (content.Contains("Exception") || content.Contains("Stack trace") || 
                        content.Contains("InnerException") || content.Contains("at "))
                    {
                        findings.Add(new VulnerabilityFinding
                        {
                            Title = "Verbose Error Messages",
                            Description = "Application is showing detailed error information",
                            Severity = VulnerabilitySeverity.Medium,
                            Category = "Information Disclosure",
                            Recommendation = "Configure custom error pages without detailed information"
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error scanning for verbose error messages");
            }

            return findings;
        }

        /// <summary>
        /// 扫描不安全的HTTP头
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanForInsecureHeaders()
        {
            var findings = new List<VulnerabilityFinding>();
            
            try
            {
                var response = await TestClient.GetAsync("/");
                
                var headers = response.Headers;
                var contentHeaders = response.Content.Headers;
                
                // 检查缺失的安全头
                var requiredHeaders = new Dictionary<string, string>
                {
                    { "X-Content-Type-Options", "X-Content-Type-Options header is missing" },
                    { "X-Frame-Options", "X-Frame-Options header is missing" },
                    { "X-XSS-Protection", "X-XSS-Protection header is missing" },
                    { "Strict-Transport-Security", "HSTS header is missing" },
                    { "Content-Security-Policy", "CSP header is missing" },
                    { "Referrer-Policy", "Referrer-Policy header is missing" }
                };
                
                foreach (var (header, description) in requiredHeaders)
                {
                    if (!headers.Contains(header))
                    {
                        findings.Add(new VulnerabilityFinding
                        {
                            Title = "Missing Security Header",
                            Description = description,
                            Severity = VulnerabilitySeverity.Medium,
                            Category = "Security Headers",
                            Recommendation = $"Add {header} header to HTTP responses"
                        });
                    }
                }
                
                // 检查不安全的头
                if (headers.Contains("Server"))
                {
                    findings.Add(new VulnerabilityFinding
                    {
                        Title = "Server Header Disclosure",
                        Description = "Server header is disclosing version information",
                        Severity = VulnerabilitySeverity.Low,
                        Category = "Information Disclosure",
                        Recommendation = "Remove or minimize Server header"
                    });
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error scanning for insecure headers");
            }

            return findings;
        }

        /// <summary>
        /// 扫描不安全的Cookie设置
        /// </summary>
        private async Task<List<VulnerabilityFinding>> ScanForInsecureCookieSettings()
        {
            var findings = new List<VulnerabilityFinding>();
            
            try
            {
                var response = await TestClient.GetAsync("/");
                
                var cookies = response.Headers.GetValues("Set-Cookie");
                
                if (cookies != null)
                {
                    foreach (var cookie in cookies)
                    {
                        // 检查安全标志
                        if (!cookie.Contains("Secure"))
                        {
                            findings.Add(new VulnerabilityFinding
                            {
                                Title = "Insecure Cookie",
                                Description = "Cookie missing Secure flag",
                                Severity = VulnerabilitySeverity.Medium,
                                Category = "Cookie Security",
                                Recommendation = "Add Secure flag to cookies"
                            });
                        }
                        
                        if (!cookie.Contains("HttpOnly"))
                        {
                            findings.Add(new VulnerabilityFinding
                            {
                                Title = "Insecure Cookie",
                                Description = "Cookie missing HttpOnly flag",
                                Severity = VulnerabilitySeverity.Medium,
                                Category = "Cookie Security",
                                Recommendation = "Add HttpOnly flag to cookies"
                            });
                        }
                        
                        if (!cookie.Contains("SameSite"))
                        {
                            findings.Add(new VulnerabilityFinding
                            {
                                Title = "Insecure Cookie",
                                Description = "Cookie missing SameSite flag",
                                Severity = VulnerabilitySeverity.Low,
                                Category = "Cookie Security",
                                Recommendation = "Add SameSite flag to cookies"
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error scanning for insecure cookie settings");
            }

            return findings;
        }
    }
}