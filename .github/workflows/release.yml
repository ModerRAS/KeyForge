name: Release and Deploy

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      prerelease:
        description: 'Is this a prerelease?'
        required: true
        default: false
        type: boolean

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_FILE: 'KeyForge-Simplified.sln'

jobs:
  build-release:
    name: Build Release for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: win-x64
            os: windows-latest
            runtime: win-x64
            extension: exe
          - target: linux-x64
            os: ubuntu-latest
            runtime: linux-x64
            extension: ''
          - target: osx-x64
            os: macos-latest
            runtime: osx-x64
            extension: ''
          - target: linux-arm64
            os: ubuntu-latest
            runtime: linux-arm64
            extension: ''
          - target: osx-arm64
            os: macos-latest
            runtime: osx-arm64
            extension: ''
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.release_type }}" >> $GITHUB_ENV
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        fi
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test KeyForge.Tests/KeyForge.Tests.csproj --configuration Release --no-build --verbosity normal
      
    - name: Publish UI application
      run: |
        dotnet publish KeyForge.UI/KeyForge.UI.csproj \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -p:EnableCompressionInSingleFile=true \
          --output ./publish/${{ matrix.target }}
          
    - name: Create package
      run: |
        mkdir -p package
        cp -r publish/${{ matrix.target }}/* package/
        cp README.md package/
        cp LICENSE package/
        echo "# KeyForge ${{ env.VERSION }}" > package/RELEASE_NOTES.md
        echo "## Release Date: $(date)" >> package/RELEASE_NOTES.md
        echo "## Platform: ${{ matrix.target }}" >> package/RELEASE_NOTES.md
        echo "## What's New" >> package/RELEASE_NOTES.md
        echo "- Cross-platform HAL implementation" >> package/RELEASE_NOTES.md
        echo "- Conditional compilation for Windows API" >> package/RELEASE_NOTES.md
        echo "- Improved error handling and logging" >> package/RELEASE_NOTES.md
        echo "- Enhanced UAT testing framework" >> package/RELEASE_NOTES.md
        
    - name: Create archive
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          cd package && 7z a -r ../KeyForge-${{ env.VERSION }}-${{ matrix.target }}.zip .
        else
          tar -czf KeyForge-${{ env.VERSION }}-${{ matrix.target }}.tar.gz -C package .
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: KeyForge-${{ matrix.target }}
        path: |
          KeyForge-${{ env.VERSION }}-${{ matrix.target }}.zip
          KeyForge-${{ env.VERSION }}-${{ matrix.target }}.tar.gz

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    permissions:
      contents: write
      
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        cp KeyForge-*/*.zip release-assets/ 2>/dev/null || true
        cp KeyForge-*/*.tar.gz release-assets/ 2>/dev/null || true
        
    - name: Generate release notes
      run: |
        echo "# KeyForge Release ${{ env.VERSION }}" > release-notes.md
        echo "" >> release-notes.md
        echo "## 🚀 What's New" >> release-notes.md
        echo "" >> release-notes.md
        echo "### Core Features" >> release-notes.md
        echo "- ✅ **Cross-platform HAL implementation** - Full support for Windows, Linux, and macOS" >> release-notes.md
        echo "- ✅ **Conditional compilation** - Platform-specific code compilation" >> release-notes.md
        echo "- ✅ **Windows API integration** - Direct hardware interaction on Windows" >> release-notes.md
        echo "- ✅ **Improved error handling** - Better exception handling and logging" >> release-notes.md
        echo "" >> release-notes.md
        echo "### Testing Framework" >> release-notes.md
        echo "- ✅ **BDD-style testing** - Behavior-driven development approach" >> release-notes.md
        echo "- ✅ **UAT automation** - Comprehensive user acceptance testing" >> release-notes.md
        echo "- ✅ **Real-world scenarios** - Practical testing scenarios" >> release-notes.md
        echo "- ✅ **Performance benchmarks** - Automated performance testing" >> release-notes.md
        echo "" >> release-notes.md
        echo "### Platform Support" >> release-notes.md
        echo "- 🪟 **Windows** - Full feature support with native API integration" >> release-notes.md
        echo "- 🐧 **Linux** - Basic compatibility mode" >> release-notes.md
        echo "- 🍎 **macOS** - Basic compatibility mode" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 📦 Installation" >> release-notes.md
        echo "" >> release-notes.md
        echo "1. Download the appropriate package for your platform" >> release-notes.md
        echo "2. Extract the archive" >> release-notes.md
        echo "3. Run the KeyForge executable" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 🔧 System Requirements" >> release-notes.md
        echo "" >> release-notes.md
        echo "- **Windows**: Windows 10 or later" >> release-notes.md
        echo "- **Linux**: Ubuntu 18.04 or later" >> release-notes.md
        echo "- **macOS**: macOS 10.14 or later" >> release-notes.md
        echo "- **RAM**: 4GB minimum, 8GB recommended" >> release-notes.md
        echo "- **Storage**: 100MB free space" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 🐛 Known Issues" >> release-notes.md
        echo "" >> release-notes.md
        echo "- Limited hardware functionality on non-Windows platforms" >> release-notes.md
        echo "- Some advanced features may require elevated privileges" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 📄 Documentation" >> release-notes.md
        echo "" >> release-notes.md
        echo "For detailed documentation, please visit our [Wiki](https://github.com/ModerRAS/KeyForge/wiki)" >> release-notes.md
        echo "" >> release-notes.md
        echo "## 🤝 Contributing" >> release-notes.md
        echo "" >> release-notes.md
        echo "We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md)" >> release-notes.md
        echo "" >> release-notes.md
        echo "---" >> release-notes.md
        echo "*This release was automatically generated by GitHub Actions*" >> release-notes.md
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.VERSION }}
        name: KeyForge ${{ env.VERSION }}
        body_path: release-notes.md
        files: release-assets/*
        draft: false
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}
        generate_release_notes: true
        
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        destination_dir: ./docs

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, deploy-docs]
    if: always()
    
    steps:
    - name: Send notification
      run: |
        echo "🎉 Release ${{ env.VERSION }} has been created successfully!"
        echo "📦 Packages are available in GitHub Releases"
        echo "📚 Documentation has been deployed to GitHub Pages"
        echo "✅ All automated tests have passed"